[
    {
      "name": "ios.state",
      "type": {
        "allow_custom_values": false,
        "members": [
          {
            "id": "active",
            "value": "active",
            "brief": "The app has become `active`. Associated with UIKit notification `applicationDidBecomeActive`.\n",
            "note": null
          },
          {
            "id": "inactive",
            "value": "inactive",
            "brief": "The app is now `inactive`. Associated with UIKit notification `applicationWillResignActive`.\n",
            "note": null
          },
          {
            "id": "background",
            "value": "background",
            "brief": "The app is now in the background. This value is associated with UIKit notification `applicationDidEnterBackground`.\n",
            "note": null
          },
          {
            "id": "foreground",
            "value": "foreground",
            "brief": "The app is now in the foreground. This value is associated with UIKit notification `applicationWillEnterForeground`.\n",
            "note": null
          },
          {
            "id": "terminate",
            "value": "terminate",
            "brief": "The app is about to terminate. Associated with UIKit notification `applicationWillTerminate`.\n",
            "note": null
          }
        ]
      },
      "brief": "This attribute represents the state the application has transitioned into at the occurrence of the event.\n",
      "requirement_level": "required",
      "note": "The iOS lifecycle states are defined in the [UIApplicationDelegate documentation](https://developer.apple.com/documentation/uikit/uiapplicationdelegate#1656902), and from which the `OS terminology` column values are derived.\n"
    },
    {
      "name": "android.state",
      "type": {
        "allow_custom_values": false,
        "members": [
          {
            "id": "created",
            "value": "created",
            "brief": "Any time before Activity.onResume() or, if the app has no Activity, Context.startService() has been called in the app for the first time.\n",
            "note": null
          },
          {
            "id": "background",
            "value": "background",
            "brief": "Any time after Activity.onPause() or, if the app has no Activity, Context.stopService() has been called when the app was in the foreground state.\n",
            "note": null
          },
          {
            "id": "foreground",
            "value": "foreground",
            "brief": "Any time after Activity.onResume() or, if the app has no Activity, Context.startService() has been called when the app was in either the created or background states.",
            "note": null
          }
        ]
      },
      "brief": "This attribute represents the state the application has transitioned into at the occurrence of the event.\n",
      "requirement_level": "required",
      "note": "The Android lifecycle states are defined in [Activity lifecycle callbacks](https://developer.android.com/guide/components/activities/activity-lifecycle#lc), and from which the `OS identifiers` are derived.\n"
    },
    {
      "name": "feature_flag.key",
      "type": "string",
      "brief": "The unique identifier of the feature flag.",
      "examples": [
        "logo-color"
      ],
      "requirement_level": "required"
    },
    {
      "name": "feature_flag.provider_name",
      "type": "string",
      "brief": "The name of the service provider that performs the flag evaluation.",
      "examples": [
        "Flag Manager"
      ],
      "requirement_level": "recommended"
    },
    {
      "name": "feature_flag.variant",
      "type": "string",
      "brief": "SHOULD be a semantic identifier for a value. If one is unavailable, a stringified version of the value can be used.\n",
      "examples": [
        "red",
        "true",
        "on"
      ],
      "requirement_level": "recommended",
      "note": "A semantic identifier, commonly referred to as a variant, provides a means\nfor referring to a value without including the value itself. This can\nprovide additional context for understanding the meaning behind a value.\nFor example, the variant `red` maybe be used for the value `#c05543`.\n\nA stringified version of the value can be used in situations where a\nsemantic identifier is unavailable. String representation of the value\nshould be determined by the implementer."
    },
    {
      "name": "exception.type",
      "type": "string",
      "brief": "The type of the exception (its fully-qualified class name, if applicable). The dynamic type of the exception should be preferred over the static type in languages that support it.\n",
      "examples": [
        "java.net.ConnectException",
        "OSError"
      ],
      "requirement_level": "recommended",
      "stability": "experimental"
    },
    {
      "name": "exception.message",
      "type": "string",
      "brief": "The exception message.",
      "examples": [
        "Division by zero",
        "Can't convert 'int' object to str implicitly"
      ],
      "requirement_level": "recommended",
      "stability": "experimental"
    },
    {
      "name": "exception.stacktrace",
      "type": "string",
      "brief": "A stacktrace as a string in the natural representation for the language runtime. The representation is to be determined and documented by each language SIG.\n",
      "examples": "Exception in thread \"main\" java.lang.RuntimeException: Test exception\\n at com.example.GenerateTrace.methodB(GenerateTrace.java:13)\\n at com.example.GenerateTrace.methodA(GenerateTrace.java:9)\\n at com.example.GenerateTrace.main(GenerateTrace.java:5)",
      "requirement_level": "recommended",
      "stability": "stable"
    },
    {
      "name": "exception.escaped",
      "type": "boolean",
      "brief": "SHOULD be set to true if the exception event is recorded at a point where it is known that the exception is escaping the scope of the span.\n",
      "requirement_level": "recommended",
      "note": "An exception is considered to have escaped (or left) the scope of a span,\nif that span is ended while the exception is still logically \"in flight\".\nThis may be actually \"in flight\" in some languages (e.g. if the exception\nis passed to a Context manager's `__exit__` method in Python) but will\nusually be caught at the point of recording the exception in most languages.\n\nIt is usually not possible to determine at the point where an exception is thrown\nwhether it will escape the scope of a span.\nHowever, it is trivial to know that an exception\nwill escape, if one checks for an active exception just before ending the span,\nas done in the [example for recording span exceptions](#recording-an-exception).\n\nIt follows that an exception may still escape the scope of the span\neven if the `exception.escaped` attribute was not set or set to false,\nsince the event might have been recorded at a time where it was not\nclear whether the exception will escape.",
      "stability": "experimental"      
    }
  ]